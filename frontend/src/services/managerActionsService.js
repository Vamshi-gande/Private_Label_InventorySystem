import { apiClient } from '@/lib/api';

/**
 * ManagerActionsService
 * Single Responsibility: Handle API interactions related to manager action signals
 */
class ManagerActionsService {
  /**
   * Fetch all manager action signals generated by the behaviour analyzer.
   * @returns {Promise<Array>} Raw signals array from the backend
   */
  async getSignals() {
    try {
      const response = await apiClient.get('/manager-actions/signals');
      return response.data;
    } catch (error) {
      console.error('Manager action signals fetch error:', error);
      const backendMsg = error?.response?.data?.error;
      throw new Error(backendMsg || 'Failed to fetch manager action signals');
    }
  }

  /**
   * Transform raw signals into a UI-friendly format.
   * Ensures each signal has a stable id and numeric confidence value.
   * @param {Array} raw
   * @returns {{ totalSignals: number, signals: Array }|null}
   */
  transformSignalsForUI(raw) {
    if (!Array.isArray(raw)) return null;

    const signals = raw.map((s, idx) => ({
      id: s.id ?? `${s.store_id}-${s.product_id}-${s.trigger}-${idx}`,
      ...s,
      confidence: typeof s.confidence === 'number' ? s.confidence : Number(s.confidence ?? 0),
    }));

    return {
      totalSignals: signals.length,
      signals,
    };
  }
}

export const managerActionsService = new ManagerActionsService(); 